# Pandas：二维数据处理


Pandas处理二维表格，其中的DataFrame对象几乎可以理解为一个Excel表：有行、列、题头等等。

DataFrame可以视为是“按列”组织的：n个列的横向并排：每个列是一个Series对象。

一个Series表示“一列”，每个Series对象又有两个部件组成，索引index和值values，其中的值values，
是一个numpy的ndarray。

反过来，一个数据序列ndarray和一个与数据等长的索引index，组成一个列Series，多个Series横向合并，组成一个DataFrame。


```{python}
import pandas as pd

df = pd.DataFrame(dict(id=[1,2,3],name = ['a','b','c']))

df
```


```{python}
x = df.name
print(x)
print(type(x))
```

```{python}
print(x.index)
print(type(x.index))
```


```{python}
print(x.values)
print(type(x.values))
```

## 预备知识：常见数据格式

一般常见的数据格式包括：

1. 微软的Excel格式：2007版以后扩展名为`.xlsx`，2007版之前为`.xls`，可以直接用Excel打开处理，不详细叙述。
2. CSV格式：扩展名为`.csv`，也可以用Excel打开。但这种文件本质上是一个纯文本文件，和`.txt`文件或者python代码`.py`文件并无区别，都可以用记事本或者vscode打开。

其中：

1. CSV文件：其中所有的信息都是数据，不包括格式、排版、颜色等等，文件体积小，几乎任何数据处理软件都可以处理CSV文件。可以视为通用标准，你不知道要保存成什么格式，就可以用CSV。
2. Excel文件：文件里包括了大量的格式、排版、颜色等信息，文件体积比较大，多数数据处理软件都可以处理。如果你可以选择，就选择新版格式`.xlsx`。

对于我们大部分工作，两种保存数据的格式都没有本质的区别。

## 数据读取

以下数据如果不做说明，都来自CSMAR（国泰安）数据库。

vscode管理工程以目录为基础，很多功能需要你**打开一个目录**才能生效。你在vscode中打开的目录即**工作目录**。

在本课程中，所有的数据，都会放在工作目录下的**data**文件夹。

所用数据包括：

1. data/basic_info.xlsx：部分上市公司的基本信息。


```{python}
# 导入pandas和numpy是惯例
import pandas as pd
import numpy as np

# 读取工作目录下的data文件夹下的basic_info.xlsx文件
# 保存到df变量
df = pd.read_excel('data/basic_info.xlsx') 

```

读取数据后，首先检查数据读取是否符合预期。

用`.head()`方法检查前几行，默认是5行。

```{python}
df.head() # 查看df的前5行
```

再用`.info()`看每一列的信息，主要看格式。
```{python}
df.info()  # 每一列的信息
```

### 数据格式的修正

我们首先观察到：

1. 股票代码不对，如平安银行的代码应该是`000001`。
读取时默认把`股票代码`列识别为数字`int64`（见`info()`的结果），
因此前面的0就被去掉了。
2. 日期不是日期格式：从`info()`结果看，数据类型`Dtype`中，字符串`str`会被显示为`object`。
（更深入的解释见 <https://stackoverflow.com/questions/21018654/strings-in-a-dataframe-but-dtype-is-object> ）

（为什么日期数据最好是日期格式？比如你可以比较日期的先后，两个日期相减获得相差几天等等，但你无法对字符串型的日期做这类操作。）

处理这类问题一般可以 1. 在读取数据的时候就指定格式。2. 读取了数据后再转换。 

1. 读取时指定格式：

`pd.read_xxx()`方法，可以接收一个参数`converters`，这个参数是一个字典，其中key为列名，value转换的函数。

这里我们指定`股票代码`为字符串`str`，用`str`函数即可；公司成立日期为`datetime`格式，用`pd.to_datetime`函数。（这里故意漏掉`首次上市日期`）

注：这里只是告诉pandas可以用什么函数来转换指定的列，而不是你自己去调用某个函数，因此只要函数名即可。


```{python}
df = pd.read_excel('data/basic_info.xlsx',
                   converters={'股票代码':str,'公司成立日期':pd.to_datetime})

df.head()
```

```{python}
df.info()
```

查看数据的前几行以及列信息，股票代码和公司成立日期都符合我们的要求了。

2. 读取后再转换

读取`首次上市日期`列，转换格式，再写回到同一列中。对行和列的读写是后面的内容，但逻辑还是比较简单。

```{python}
df['首次上市日期'] = pd.to_datetime(df['首次上市日期'])
df.info()
```

查看`info()`，数据已经符合我们的要求。

## DataFrame的索引

```{python}
df.head()
```


对于一个DataFrame对象，每一列的标题（题头）和每一行的索引，其实都是索引index，或可称为行索引和列索引。


获得所有的列名（即获得所有的列索引）：这是一个字符串类型的索引，包括每一列的列名。

```{python}
df.columns
```

获得所有的行索引：这是一个range类的索引，从0到39。如果是时间序列数据，还可以是日期格式的行索引。

```{python}
df.index
```

我们可以用`set_index()`指定一列作为行索引，比如股票代码。

```{python}
df = df.set_index('股票代码') 
df.head()
```

注意：pandas中，大部分“写”操作（修改某个东西），默认都“不会改变原值”：你会获得一个包括修改后的新数据的DataFrame。
因此，如果要改变原值，可以把新数据重新赋值给原来的变量名（如上个cell），也可以加入参数`inplace = True`，如

```{python}
#|eval: false
# 仅作示范，不要执行，因为经过上个cell之后，已经没有`股票代码`这一列了
df.set_index('股票代码',inplace = True)
```


再看`df.index`，此时索引已经变成我们指定列，

```{python}
df.index
```



## 花式选择行与列

### 选择列

选1列，`[列名]`，返回一个`Series`对象。
```{python}
sec_name = df['股票简称']
sec_name.head()
```

查看列的
```{python}
type(sec_name) # pandas.core.series.Series 
```

选择多列，`[[列名的List]]`，返回一个`DataFrame`对象。

```{python}
df[['股票简称','上市状态']].head()
```

### loc：按索引取得行和列

`.loc[行索引，列索引]`可以按**索引**选择行或者列（行的索引是index，列的索引是columns）

```{python}
df.loc[['000001','000002'],['股票简称','上市状态']]
```

也可以只取一个值：

```{python}
df.loc['000001','股票简称']
```


行索引和列索引位置，都可以用冒号`:`表示起点和终点（注：起点终点都包括，和Python的List切片不同！）。

如果只有`:`，则代表所有行或者列。

比如：获取行索引为`000001`到`000005`，列索引为`股票简称`到`注册资本`之间的所有数据。

```{python}
df.loc['000001':'000005','股票简称':'注册资本']
```

获取“所有行（所有股票）的股票简称和上市状况”。但太长，只查看前几行

```{python}
x = df.loc[ : ,['股票简称','上市状态']]
x.head()
```

当然，如果只是取某列的全部行，上面的代码就和`df[['股票简称','上市状态']]`等价。

同Python的切片，冒号一侧不写，则表示“到尽头”。
```{python}
x = df.loc[:'000002','所属城市':]
x
```


### iloc：按位置取得行和列

`.iloc[行坐标，列坐标]`：用法和`loc`非常类似，但只是把索引index（索引可以是任何序列），换成下标（从0开始）。

注意：用法和Python的切片很类似，但包括结束点。



```{python}
df.iloc[:2,0:1]
```



## 构造Series和DataFrame

Series是序列对象，DataFrame是二维表格对象。序列可以看成是表格的一行或者一列，
表格可以也看出由序列横向或者纵向合并而成。

Series可以由Python的列表，或者NumPy的ndarray创建。

```{python}
a = pd.Series([5,6,7,8])
a
```

可见，Series创建时已经自带了index。也可以在创建时指定name属性，以及自定index

```{python}
a = pd.Series([5,6,7,8],name = "A",index= list('abcd'))
a
```

我们后面用默认的整数索引，因此用`.reset_index()`方法重置索引。（当然，上一个cell中，不用index参数也一样）

```{python}
a = a.reset_index(drop=True) # drop=True会完全丢弃索引；默认为false，索引会成为index列
a
```

创建另一个索引，名字叫B
```{python}
b = pd.Series(list('ABCD'),name = 'B')
b
```

然后我们可以把两个Series横向合并，获得一个DataFrame。

此时，Series的name属性，会成为每一列的header。

注意，`pd.concat`接收的参数是要合并的Series或者DataFrame的列表。参数`axis=1`表示横向合并（列合并）。

```{python}
df = pd.concat([a,b],axis = 1)
df
```

显然，把Series横向合并到DataFrame也是常用操作。

```{python}
c = pd.Series(['陈','李','张','黄'],name = 'C')
pd.concat([df,c],axis = 1)
```

如果index不完全相同，会发生什么？

```{python}
c = pd.Series(['陈','李','张','黄'],name = 'C',index = [1,2,3,4])
pd.concat([df,c],axis = 1)
```

注意：连接操作`pd.concat`会自动对齐合并对象的索引，如上一个cell。

如果你想忽略索引，只是想简单粗暴地合并，那么`reset_index(drop=True)`，即可把index复原到0开始的整数。

```{python}
c = pd.Series(['陈','李','张','黄'],name = 'C',index = [1,2,3,4])
d = pd.concat([df,c.reset_index(drop=True)],axis = 1)
d
```


当然，纵向合并（增加行）也完全可以。以2个DataFrame为例：

先构造2个DataFrame

```{python}
g = d.iloc[:2]
g
```

```{python}
h = d.iloc[2:]
h = h.reset_index(drop = True)
h
```

2个DataFrame的index会原样保留，`axis=0`表示纵向（上下）合并。
```{python}
pd.concat([g,h],axis=0)
```

参数`ignore_index = True`则会重置index。
```{python}
pd.concat([g,h],axis=0,ignore_index = True)
```

## 数据清洗与整合

把从不同来源的数据，裁剪整合到你需要的样式。





## 时间序列数据专题

### Python和Pandas的时间格式

### 


