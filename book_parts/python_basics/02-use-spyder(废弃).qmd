# 使用Spyder编程环境

实际上，我们真正用python做数据分析的时候，一般会利用一个集成编程环境，例如我们**本课程要用的Spyder**，或者流行的PyCharm，或者jupyter notebook等等。

这些集成编辑环境，通常会把.py文件的编辑和python的交互环境结合起来，让我们一边编辑py文件的同时，一边执行代码并查看结果。数据分析完毕时，代码同时也写成了。

## 界面
打开Spyder

<img src="images/Spyder_icon.png" width="200"/>

<img src="images/spyder_ui.png" />


Spyder默认打开了一个临时的`.py`文件。

1. 左边是一个**文本编辑器**（回忆前面我们编辑`add.py`文件所用的**记事本**）。
2. 文本编辑器的标签页，显示我们当前打开的文件是`temp.py`。如果文件名后带`*`号，表示这个文件修改了但尚未保存。
3. 标签页上方，显示了当前文件`temp.py`的[路径](#path)。显然，这是一个绝对路径，显示了从根目录开始到这个文件的完整路径。
4. 右下角是Python的交互运行环境。这个环境叫`IPython`，比我们刚才运行[Python交互环境](#python_interactive)要稍微先进一点，但本质上并无不同。
5. 工具栏，我们后面再说。

## 在Spyder中写代码

我们在左侧的文本编辑器，把刚才的1+2程序写进去，按Ctrl+s保存一下（Mac: Cmd + s）。

<img src="images/spyder_ui_1p2.png" />


## 运行程序

### 从头到尾运行代码

点击工具栏的运行按钮（Run File），或者按键盘的F5，我们可以把当前的`.py`脚本从头到尾运行一遍。
看交互式窗口，得到结果为`3`。

<img src="images/spyder_ui_runall.png" />

Run File，这个按钮的功能约等于我们在命令行环境下，直接运行“`Python temp.py`”。(注意我们正在编辑的文件是`temp.py`)

### 变量监视器

点击右上角一栏的`Variable Explorer`（变量浏览器），可以看到当前运行环境中的所有变量和他们的类型以及值（变量类型见后）。
点击交互界面上方的垃圾桶图标`Remove all variables`（移除所有变量），点击yes。

<img src="images/spyder_ui_ve.png" />

### 单步执行

现在找到“Run selection or current line”按钮。

<img src="images/btn_run_line.png"  width="50"/>

这个按钮，顾名思义。如果你选择了一部分代码则，执行这部分代码。如果你没有选择代码，则执行光标所在行。执行完毕后，光标会自动移动到下一行。

让我们试一下。

1. 点击第一行a=1，让输入光标在这一行
2. 点击 <img src="images/btn_run_line.png"  width="30"/>，或者F9
3. 我们可以看到，这个按钮把光标所在行的代码“a = 1”，发送到了交互窗口，并执行，且光标自动下移了一行。
4. 右上方的变量浏览器，现在自动出现了变量a

<img src="images/spyder_ui_runline.png"/>

显然，如果我们连续点击<img src="images/btn_run_line.png"  width="30"/>，或者连按F9，我们就可以连续地、单步执行代码。每按一次，Spyder会把当前行的代码（或者你选定的代码），发送到交互窗口并执行。

打一个比方，这就像你同时打开记事本和python交互环境，一边在记事本中写代码，一边手动地拷贝粘贴到python交互环境中执行，是同样的逻辑。

这使得我们可以逐步查看每一行代码的效果，是实际工作中的常规操作之一。

<img src="images/spyder_ui_runline_all.png"/>

### 选择执行
这个按钮也可以一次性执行**你所选择的代码**，这个大家可以自行尝试。

## 预备知识：Python的注释（comment）

先说注释。Python使用井号：`#`来表示注释。所谓注释，就是“**给人看**”的内容，而Python的解释器会直接忽略掉这部分。

1. 注释可以出现在任何地方，注意`#`号只会影响同一行右边的代码，因此也可以出现在行尾。
2. 注释往往也可以用来临时屏蔽一部分代码，只要在代码的最左侧插入一个`#`，那么整行代码会被Python解释器忽略。这是常用技巧。

我们尝试写几个注释，例如：

<img src="images/spyder_comment.png"/>



注释是对代码的说明，非常重要：

1.	写代码时间长了，肯定会不记得自己写的内容。有时候上午写的，下午就会忘记。
2.	多人合作的时候，要读懂彼此的代码，也必须有良好的注释。

特别地，**注释是考试的给分点**。你的考试程序输出了正确的结果，可以得到合格评价，同时具有良好的编写风格、合理的注释，才能得到更高分。

## 运行程序（续）

### 按Cell（单元格）执行


一般我们的程序，往往有一长串代码，或者连续几条语句，只是为了达到某一个特定目的。如果我们修改了某些代码，希望把整个代码块一次执行完，直接查看阶段性的结果，就可以使用cell。

可以使用特殊的注释`#%%`，两个`#%%`中间的代码，会被Spyder认为是一个cell（单元格）。光标所在的cell，会有不同颜色的背景颜色来区分。

<img src="images/spyder_cell.png"/>

定义好cell之后，我们可以使用工具栏中的2个按钮 

<img src="images/btn_run_cell.png"/>

1. 第一个按钮是“Run current cell：执行这个cell”，快捷键是Ctrl + 回车。
2. 第二个按钮是“Run current cell and go to the next one：执行这个cell，且光标移动到下一个cell”，快捷键是Shift + 回车。
	
按cell执行，和前述的按行执行，是我们做数据分析的时候会反复使用的按钮。

我们先新建一个“赋值的cell”，和“计算并打印的cell”，们用垃圾桶图标，先清空所有变量。

执行第一个cell，可以发现，变量`a`和`b`同时出现在变量浏览器中。这意味着这个cell内的按钮被一次性执行了。


<img src="images/btn_run_cell_2.png"/>

当我们只关心一大块代码的结果，但不是太关心过程，我们就可以把这块代码划分为一个cell，随后就可以整块整块地执行。


### 显示你要的结果

使用交互窗口：
1. 我们之间在交互窗口输入这个变量名`a`，回车
2. 我们之间在交互窗口输入一个打印语句`print(a)`，回车

两者基本一样，但某些情况print可以接收参数，改变打印行为（样式等），直接输入变量名，就只能用默认的形式输出。

使用编辑器
1. 逐行执行，单独一个变量名也可以显示
2. 按cell运行，只会显示`print()`的结果

一般而言，使用`print()`，在代码中会比较“显眼”，达到顾名思义的效果，尽量使用。而如果只是想临时看一下变量的值，直接在交互窗口输入也可以。



## 确定一个项目文件夹

1. 以`C:/PythonClass`为例。课程所有的有关文件，都会保存在这个目录下。我们称之为“**工作目录Working Directory**”。
2. 也可以把工作目录建立在你习惯的位置。
3. 为一个特定的工作建立一个特定的目录，是一个良好的习惯。


### 在Spyder中设定这个目录为工作目录

1. 点击界面右上角的“browse a working directory”按钮，选择你刚才建立的工作目录。（本例中为`C:/PythonClass`）

![](images/btn_setwd.png "下载anaconda")

2. 切换到Files标签栏
3.  把我们正在编辑的py文件，另存为到工作目录，命名为`add.py`。这样，在文件列表，我们会看到这个文件

注意：如果前面大家按步骤做，这里应该会覆盖掉上一节课的同名文件。

























